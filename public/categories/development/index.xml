<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on crazy.ark</title>
    <link>https://blog.crazyark.me/categories/development/</link>
    <description>Recent content in Development on crazy.ark</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Sep 2017 21:16:06 +0800</lastBuildDate>
    
	<atom:link href="https://blog.crazyark.me/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AGC019-F Mysterious Combinators</title>
      <link>https://blog.crazyark.me/posts/agc019_mysterious_combinators/</link>
      <pubDate>Wed, 06 Sep 2017 21:16:06 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/agc019_mysterious_combinators/</guid>
      <description>原题目在 AtCoder Grand Contest 019，F - Yes or No。 把它改成数学题，题目大意如下： 假设你有M+N个问题要回答，每个问题的回答不是Yes就是No。你知道其中有</description>
    </item>
    
    <item>
      <title>Longest Increasing Subsequence</title>
      <link>https://blog.crazyark.me/posts/longest_increasing_subsequence/</link>
      <pubDate>Fri, 01 Sep 2017 15:41:22 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/longest_increasing_subsequence/</guid>
      <description>最长递增子序列算法，原本以为已经记住了最快的算法，看来是记性太差，今天碰到一道题目又忘记了怎么做 🙄 三种做法：DP，Sort + LCS，DP + B</description>
    </item>
    
    <item>
      <title>SIGFPE When Doing DivQ</title>
      <link>https://blog.crazyark.me/posts/cpp_sigfpe/</link>
      <pubDate>Sun, 27 Aug 2017 17:38:37 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/cpp_sigfpe/</guid>
      <description>第一次遇到了除0以外的SIGFPE，记录一下。 症状 在使用以下函数的时候，假定 a = 1e18, b = 1e18, m = 1e9 + 7 就会触发 SIGFPE。 long mulmod(long a, long b, long m) { long res;</description>
    </item>
    
    <item>
      <title>Project Euler #188 -- The Hyperexponentiation of A Number</title>
      <link>https://blog.crazyark.me/posts/projecteuler_188/</link>
      <pubDate>Fri, 25 Aug 2017 21:32:26 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/projecteuler_188/</guid>
      <description>接上次的博文，我们来解决大整数分解问题，并最终解决 Project Euler #188。 回忆一下，问题要求解的是 $a\uparrow\uparrow b \ (\textrm{mod} \ m)$，其中 $1 \le a, b, m \le 10^{18}$。</description>
    </item>
    
    <item>
      <title>Polynomial Hash and Theu-Morse Sequence</title>
      <link>https://blog.crazyark.me/posts/transaction_certificates/</link>
      <pubDate>Mon, 21 Aug 2017 23:58:42 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/transaction_certificates/</guid>
      <description>前两天刷 Hackerrank 上的 Contest，给了两天时间，没想到被最后一题卡成🐶，谨记录思考和收获。 原题目在 https://www.hackerrank.com/contests/gs-codesprint/challenges/transaction-certificates ，就不在此赘述了。 思考过程 首先，题目其实就是</description>
    </item>
    
    <item>
      <title>Stoer-Wagner Algorithm -- Global Min-Cut in Undirected Weighted Graphs</title>
      <link>https://blog.crazyark.me/posts/stoer_wagner_al/</link>
      <pubDate>Sat, 05 Aug 2017 22:14:01 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/stoer_wagner_al/</guid>
      <description>最近碰到一道题目，求一个图的全局最小割，可惜图论博主学的不太好，至今只记得一个求s-t最大流/最小割的 ford-fulkerson。想了想总</description>
    </item>
    
    <item>
      <title>Ford Johnson Algorithm</title>
      <link>https://blog.crazyark.me/posts/ford_johnson_algorithm/</link>
      <pubDate>Fri, 04 Aug 2017 14:15:35 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/ford_johnson_algorithm/</guid>
      <description>偶然发现 AtCoder，上去注册了准备试试，结果卡在practice contest&amp;hellip; 问题倒是很简单： There are N balls labeled with the first N uppercase letters. The balls have pairwise distinct weights. You are allowed to ask at most Q queries. In</description>
    </item>
    
    <item>
      <title>Sliding Window Maximum / Monotonic Queue</title>
      <link>https://blog.crazyark.me/posts/monotonic_queue/</link>
      <pubDate>Thu, 03 Aug 2017 15:55:02 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/monotonic_queue/</guid>
      <description>Leetcode 上有一道题叫 Sliding Window Maximum，虽然不是今天刷的，但是解法非常有意思，就记录一下。 问题描述： Given an array nums, there is a sliding window of size k which is moving from the very left of the array to</description>
    </item>
    
    <item>
      <title>Selection in X&#43;Y or Sorted Matrices</title>
      <link>https://blog.crazyark.me/posts/selection_in_x_plus_y_and_matrices_with_sorted_rows_and_columns/</link>
      <pubDate>Wed, 02 Aug 2017 20:58:55 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/selection_in_x_plus_y_and_matrices_with_sorted_rows_and_columns/</guid>
      <description>&lt;p&gt;今天在刷 leetcode 的时候遇到一道题目 &lt;a href=&#34;https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/description/&#34;&gt;Kth Smallest Element in a Sorted Matrix&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;首先用一个 Min-Heap 就可以得到 O(klgn) (n为列数)的算法，实现放在最后。&lt;/p&gt;

&lt;p&gt;然而在翻阅览 Discuss 区的时候发现，这玩意居然有 O(n) (n为行、列数) 的算法，来自一篇论文 &lt;a href=&#34;http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf&#34;&gt;Selection in X + Y and Matrices with Sorted Rows and Columns&lt;/a&gt;，同时适用于另一道题 &lt;a href=&#34;https://leetcode.com/problems/find-k-pairs-with-smallest-sums/&#34;&gt;Find k Pairs with Smallest Sums&lt;/a&gt;，在此只做介绍，因为我不认为有人能在面试的时候写的出来&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dynamic Proxy in Java</title>
      <link>https://blog.crazyark.me/posts/dynamic_proxy/</link>
      <pubDate>Sat, 29 Jul 2017 22:44:24 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/dynamic_proxy/</guid>
      <description>&lt;p&gt;虽然在一年前就知道了 Proxy 模式，但是基本没有尝试使用过，仅在框架里看到一些例子。昨天翻阅《大型网站系统与Java中间件实践》时，偶然发现了 Proxy 模式在 Java 中的应用 —— 动态代理，遂记录下来，顺便复习一下 Proxy 模式。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Boyer-Moore Majority Voting Algorithm</title>
      <link>https://blog.crazyark.me/posts/majority_voting_al/</link>
      <pubDate>Fri, 28 Jul 2017 21:08:02 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/majority_voting_al/</guid>
      <description>&lt;p&gt;刷leetcode时碰到的问题，本篇仅做简要描述，以及记录思考。&lt;/p&gt;

&lt;p&gt;参考自: &lt;a href=&#34;https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html&#34;&gt;https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html&lt;/a&gt;，一篇写的非常好的博客&lt;/p&gt;

&lt;p&gt;问题描述：考虑你有一个长度为n的&lt;strong&gt;无序&lt;/strong&gt;列表，现在你想知道列表中是否有一个值占据了列表的一半以上 (majority)，如果有的话找出这个数。&lt;/p&gt;

&lt;p&gt;这个问题的一个普遍的应用场景是在容错计算 (fault-tolerant computing) 中，在进行了多次冗余的计算后，输出最后多数计算得到的值。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2017 Alibaba Middleware 24h Final (Just for Fun 😀)</title>
      <link>https://blog.crazyark.me/posts/topkn/</link>
      <pubDate>Wed, 26 Jul 2017 16:59:26 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/topkn/</guid>
      <description>&lt;p&gt;今年阿里中间件比赛的时候不巧博主心情不好，外加要准备期末考试，并没有参加，非常遗憾。不过好在好基友 &lt;a href=&#34;https://ericfu.me&#34;&gt;Eric Fu&lt;/a&gt; 参加并获得了冠军！今年的主题是分布式数据库，如果想了解详情及复赛的解题思路请读者前往 Eric 的博客。&lt;/p&gt;

&lt;p&gt;博主没有参加甚是遗憾，外加看到题目手痒难耐，遂问基友讨了最后的24h极客赛来玩一玩。&lt;/p&gt;

&lt;h2 id=&#34;24h-topkn&#34;&gt;24h TOPKN&lt;/h2&gt;

&lt;p&gt;题目是分布式数据库上的分页排序，对应的SQL执行为 order by id limit k，n；主要的技术挑战为&amp;rdquo;分布式&amp;rdquo;的策略，赛题中使用多个文件模拟多个数据分片。&lt;/p&gt;

&lt;p&gt;简称 top(k, n)。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>