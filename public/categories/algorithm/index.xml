<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on crazy.ark</title>
    <link>https://blog.crazyark.me/categories/algorithm/</link>
    <description>Recent content in Algorithm on crazy.ark</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Sep 2017 01:06:11 +0800</lastBuildDate>
    
	<atom:link href="https://blog.crazyark.me/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sparse Table &amp; Parallel Binary Search</title>
      <link>https://blog.crazyark.me/posts/hourrank23/</link>
      <pubDate>Sun, 10 Sep 2017 01:06:11 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/hourrank23/</guid>
      <description>不刷题不知道自己菜，越刷题越发现自己🙄 —— 记 HourRank23 被虐。 Sparse Table 还记得上两篇线段树和BIT都讲到了区间查找的问题，我们来回忆一下。 线段树空间支持各种</description>
    </item>
    
    <item>
      <title>Binary Indexed Tree</title>
      <link>https://blog.crazyark.me/posts/binary_indexed_tree/</link>
      <pubDate>Fri, 08 Sep 2017 22:23:50 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/binary_indexed_tree/</guid>
      <description>Binary Indexed Tree/Fenwick tree 的树构成方式我一直很疑惑，总是似懂非懂。现在终于弄清楚了它的节点的父子关系，记录下来防止忘记。 Binary Indexed Tree BIT 通常用于存储前缀和，或者存储数</description>
    </item>
    
    <item>
      <title>Segment Tree</title>
      <link>https://blog.crazyark.me/posts/segment_tree/</link>
      <pubDate>Fri, 08 Sep 2017 12:58:11 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/segment_tree/</guid>
      <description>本篇为WCIPEG上关于SegmentTree的翻译稿，除了删去了几个小节，其余行文结构将完全一致。 线段树是一种非常灵活的数据结构，它可以帮</description>
    </item>
    
    <item>
      <title>Longest Increasing Subsequence</title>
      <link>https://blog.crazyark.me/posts/longest_increasing_subsequence/</link>
      <pubDate>Fri, 01 Sep 2017 15:41:22 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/longest_increasing_subsequence/</guid>
      <description>最长递增子序列算法，原本以为已经记住了最快的算法，看来是记性太差，今天碰到一道题目又忘记了怎么做 🙄 三种做法：DP，Sort + LCS，DP + B</description>
    </item>
    
    <item>
      <title>Project Euler #188 -- The Hyperexponentiation of A Number</title>
      <link>https://blog.crazyark.me/posts/projecteuler_188/</link>
      <pubDate>Fri, 25 Aug 2017 21:32:26 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/projecteuler_188/</guid>
      <description>接上次的博文，我们来解决大整数分解问题，并最终解决 Project Euler #188。 回忆一下，问题要求解的是 $a\uparrow\uparrow b \ (\textrm{mod} \ m)$，其中 $1 \le a, b, m \le 10^{18}$。</description>
    </item>
    
    <item>
      <title>Stoer-Wagner Algorithm -- Global Min-Cut in Undirected Weighted Graphs</title>
      <link>https://blog.crazyark.me/posts/stoer_wagner_al/</link>
      <pubDate>Sat, 05 Aug 2017 22:14:01 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/stoer_wagner_al/</guid>
      <description>最近碰到一道题目，求一个图的全局最小割，可惜图论博主学的不太好，至今只记得一个求s-t最大流/最小割的 ford-fulkerson。想了想总</description>
    </item>
    
    <item>
      <title>Ford Johnson Algorithm</title>
      <link>https://blog.crazyark.me/posts/ford_johnson_algorithm/</link>
      <pubDate>Fri, 04 Aug 2017 14:15:35 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/ford_johnson_algorithm/</guid>
      <description>偶然发现 AtCoder，上去注册了准备试试，结果卡在practice contest&amp;hellip; 问题倒是很简单： There are N balls labeled with the first N uppercase letters. The balls have pairwise distinct weights. You are allowed to ask at most Q queries. In</description>
    </item>
    
    <item>
      <title>Sliding Window Maximum / Monotonic Queue</title>
      <link>https://blog.crazyark.me/posts/monotonic_queue/</link>
      <pubDate>Thu, 03 Aug 2017 15:55:02 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/monotonic_queue/</guid>
      <description>Leetcode 上有一道题叫 Sliding Window Maximum，虽然不是今天刷的，但是解法非常有意思，就记录一下。 问题描述： Given an array nums, there is a sliding window of size k which is moving from the very left of the array to</description>
    </item>
    
    <item>
      <title>Selection in X&#43;Y or Sorted Matrices</title>
      <link>https://blog.crazyark.me/posts/selection_in_x_plus_y_and_matrices_with_sorted_rows_and_columns/</link>
      <pubDate>Wed, 02 Aug 2017 20:58:55 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/selection_in_x_plus_y_and_matrices_with_sorted_rows_and_columns/</guid>
      <description>&lt;p&gt;今天在刷 leetcode 的时候遇到一道题目 &lt;a href=&#34;https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/description/&#34;&gt;Kth Smallest Element in a Sorted Matrix&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;首先用一个 Min-Heap 就可以得到 O(klgn) (n为列数)的算法，实现放在最后。&lt;/p&gt;

&lt;p&gt;然而在翻阅览 Discuss 区的时候发现，这玩意居然有 O(n) (n为行、列数) 的算法，来自一篇论文 &lt;a href=&#34;http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf&#34;&gt;Selection in X + Y and Matrices with Sorted Rows and Columns&lt;/a&gt;，同时适用于另一道题 &lt;a href=&#34;https://leetcode.com/problems/find-k-pairs-with-smallest-sums/&#34;&gt;Find k Pairs with Smallest Sums&lt;/a&gt;，在此只做介绍，因为我不认为有人能在面试的时候写的出来&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Boyer-Moore Majority Voting Algorithm</title>
      <link>https://blog.crazyark.me/posts/majority_voting_al/</link>
      <pubDate>Fri, 28 Jul 2017 21:08:02 +0800</pubDate>
      
      <guid>https://blog.crazyark.me/posts/majority_voting_al/</guid>
      <description>&lt;p&gt;刷leetcode时碰到的问题，本篇仅做简要描述，以及记录思考。&lt;/p&gt;

&lt;p&gt;参考自: &lt;a href=&#34;https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html&#34;&gt;https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html&lt;/a&gt;，一篇写的非常好的博客&lt;/p&gt;

&lt;p&gt;问题描述：考虑你有一个长度为n的&lt;strong&gt;无序&lt;/strong&gt;列表，现在你想知道列表中是否有一个值占据了列表的一半以上 (majority)，如果有的话找出这个数。&lt;/p&gt;

&lt;p&gt;这个问题的一个普遍的应用场景是在容错计算 (fault-tolerant computing) 中，在进行了多次冗余的计算后，输出最后多数计算得到的值。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>